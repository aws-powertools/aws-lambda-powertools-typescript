/**
 * Batch processing exceptions
 */

/**
 * Base error type for batch processing
 * All errors thrown by major failures extend this base class
 */
class BaseBatchProcessingError extends Error {
  public childErrors: Error[];

  public msg: string;

  public constructor(msg: string, childErrors: Error[]) {
    super(msg);
    this.msg = msg;
    this.childErrors = childErrors;
  }

  /**
   * Generates a list of errors that were generated by the major failure
   * @returns Formatted string listing all the errors that occurred
   *
   * @example
   * When all batch records fail to be processed, this will generate a string like:
   * All records failed processing. 3 individual errors logged separately below.
   * ,Failed to process record.
   * ,Failed to process record.
   * ,Failed to process record.
   */
  public formatErrors(parentErrorString: string): string {
    const errorList: string[] = [parentErrorString + '\n'];

    for (const error of this.childErrors) {
      errorList.push(error.message + '\n');
    }

    return '\n' + errorList;
  }
}

/**
 * When all batch records failed to be processed
 */
class BatchProcessingError extends BaseBatchProcessingError {
  public constructor(msg: string, childErrors: Error[]) {
    super(msg, childErrors);
    const parentErrorString: string = this.message;
    this.message = this.formatErrors(parentErrorString);
    console.log(this.message);
  }
}

export { BaseBatchProcessingError, BatchProcessingError };
