name: Run unit tests

on:
  workflow_call:

jobs:
  run-linting-check-and-unit-tests:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: dev
    strategy:
      matrix:
        version: [12, 14, 16]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.version }}
          cache: "npm"
      - name: Setup npm
        run: npm i -g npm@next-8
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "./node_modules"
          # Use the combo between node version, name, and SHA-256 hash of the lock file as cache key so that
          # if one of them changes the cache is invalidated/discarded
          key: ${{ matrix.version }}-cache-utilities-node-modules-${{ hashFiles('./package-lock.json') }}
      - name: Install dependencies
        # We can skip the installation if there was a cache hit
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        # See https://github.com/npm/cli/issues/4475 to see why --foreground-scripts
        run: npm ci --foreground-scripts
      - name: Build packages
        # If there's a cache hit we still need to manually build the packages
        # this would otherwise have been done automatically as a part of the
        # post-install npm hook
        if: steps.cache-node-modules.outputs.cache-hit == 'true'
        run: |
          npm run build -w packages/commons
          npm run build -w packages/logger & npm run build -w packages/tracer & npm run build -w packages/metrics
      - name: Run linting
        run: npm run lint -w packages/commons -w packages/logger -w packages/tracer -w packages/metrics
      - name: Run unit tests
        run: npm t -w packages/commons -w packages/logger -w packages/tracer -w packages/metrics
  check-examples:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: dev
    strategy:
      matrix:
        example: ["sam", "cdk"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "./node_modules"
          key: cache-node-modules-${{ hashFiles('./package-lock.json') }}
      - name: Install dependencies
        # We can skip the installation if there was a cache hit
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --foreground-scripts
      - name: Run linting
        run: npm run lerna -- run lint --scope ${{ matrix.example }}-example
      - name: Run tests
        run:  npm run lerna -- run test --scope ${{ matrix.example }}-example
  check-layer-publisher:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "./node_modules"
          key: cache-node-modules-${{ hashFiles('./package-lock.json') }}
      - name: Install Layer publisher
        # We can skip the installation if there was a cache hit
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --foreground-scripts
      - name: Run linting
        run: npm run lerna -- run lint --scope layer-publisher