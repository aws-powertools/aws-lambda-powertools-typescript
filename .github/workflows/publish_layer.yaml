name: Deploy layer to all regions

permissions:
  id-token: write
  contents: read

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      latest_published_version:
        description: "Latest npm published version to rebuild corresponding layer for, e.g. v1.0.2"
        default: "v1.0.2"
        required: true
  # Automatic trigger after release
  workflow_run:
    workflows: ["Make Release"]
    types:
      - completed

jobs:
  # Build layer by running cdk synth in layer-publisher directory and uploading cdk.out for deployment
  build-layer:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success') || (github.event_name == 'workflow_dispatch') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Set release notes tag
        run: |
          RELEASE_INPUT=${{ inputs.latest_published_version }}
          LATEST_TAG=$(git describe --tag --abbrev=0)
          RELEASE_TAG_VERSION=${RELEASE_INPUT:-$LATEST_TAG}
          echo "RELEASE_TAG_VERSION=${RELEASE_TAG_VERSION:1}" >> $GITHUB_ENV
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "./node_modules"
          # Use the combo between node version, name, and SHA-256 hash of the lock file as cache key so that
          # if one of them changes the cache is invalidated/discarded
          key: 18-cache-utilities-node-modules-${{ hashFiles('./package-lock.json') }}
      - name: Install dependencies
        # We can skip the installation if there was a cache hit
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        # See https://github.com/npm/cli/issues/4475 to see why --foreground-scripts
        run: npm ci --foreground-scripts
      - name: Create layer files
        run: |
          rm -rf tmp/nodejs
          mkdir -p tmp/nodejs
          cd tmp/nodejs
          npm init -y
          npm i \
            @aws-lambda-powertools/logger@$RELEASE_TAG_VERSION \
            @aws-lambda-powertools/metrics@$RELEASE_TAG_VERSION \
            @aws-lambda-powertools/tracer@$RELEASE_TAG_VERSION
          rm -rf node_modules/@types \
            package.json \
            package-lock.json
          cd ../..
      - name: CDK build
        run: npm run cdk -w layers -- synth --context PowerToolsPackageVersion=$RELEASE_TAG_VERSION -o cdk.out
      - name: zip output
        run: zip -r cdk.out.zip cdk.out
      - name: Archive CDK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cdk-layer-artifact
          path: layers/cdk.out.zip

  # Deploy layer to all regions in beta account
  deploy-beta:
    needs:
      - build-layer
    uses: ./.github/workflows/reusable_deploy_layer_stack.yml
    with:
      stage: "BETA"
      artifact-name: "cdk-layer-artifact"
    secrets:
      target-account-role: ${{ secrets.AWS_LAYERS_BETA_ROLE_ARN }}

  # Deploy layer to all regions in prod account
  deploy-prod:
    needs:
      - deploy-beta
    uses: ./.github/workflows/reusable_deploy_layer_stack.yml
    with:
      stage: "PROD"
      artifact-name: "cdk-layer-artifact"
    secrets:
      target-account-role: ${{ secrets.AWS_LAYERS_PROD_ROLE_ARN }}