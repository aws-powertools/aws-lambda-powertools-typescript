name: Publish docs

on:
  workflow_call:
    inputs:
      workflow_origin: # see https://github.com/awslabs/aws-lambda-powertools-python/issues/1349
        required: true
        type: string
      prIsMerged:
        required: false
        default: "false"
        type: string
      isRelease:
        required: false
        default: "false"
        type: string
    secrets:
      token:
        required: true

jobs:
  publish-docs:
    # see https://github.com/awslabs/aws-lambda-powertools-python/issues/1349
    if: inputs.workflow_origin == 'dreamorosi/aws-lambda-powertools-typescript'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Here `token` is needed to avoid incurring in error GH006 Protected  Branch Update Failed,
          token: ${{ secrets.token }}
          # While `fetch-depth` is used to allow the workflow to later commit & push the changes.
          fetch-depth: 0
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
      - name: Install
        run: npm ci --foreground-scripts
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      # We run this step only when the workflow has been triggered by a release
      # in this case we publish the docs to `/latest`
      - name: Set RELEASE_VERSION env var to `latest`
        if: ${{ inputs.isRelease == 'true' }}
        run: |
          RELEASE_VERSION=$(git describe --abbrev=0 | sed 's/v//')
          echo "RELEASE_VERSION=${RELEASE_VERSION}"
          echo "${{ github.ref_name }}"
          echo "${GITHUB_REF#refs/*/}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      # We run this step only when the workflow has been triggered by a PR merge
      # in this case we publish the docs to `/dev`
      - name: Set RELEASE_VERSION env var to `dev`
        if: ${{ inputs.prIsMerged == 'true' }}
        run: |
          echo "RELEASE_VERSION=dev" >> $GITHUB_ENV
      - name: Install doc generation dependencies
        run: |
          pip install --upgrade pip 
          pip install -r docs/requirements.txt
      - name: Setup doc deploy
        run: |
          git config --global user.name Docs deploy
          git config --global user.email docs@dummy.bot.com
      - name: Publish docs to latest
        if: ${{ env.RELEASE_VERSION != 'dev' }}
        run: |
          rm -rf site
          mkdocs build
          mike deploy --push --update-aliases --no-redirect "${{ env.RELEASE_VERSION }}" "latest"
          # Set latest version as a default
          mike set-default --push latest
      - name: Publish docs to dev
        if: ${{ env.RELEASE_VERSION == 'dev' }}
        run: |
          rm -rf site
          mkdocs build
          mike deploy --push dev
      - name: Build API docs
        run: |
          rm -rf api
          npm run docs-generateApiDoc
      - name: Release API docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: ${{ env.RELEASE_VERSION }}/api
      - name: Release API docs to latest
        if: ${{ env.RELEASE_VERSION != 'dev' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: latest/api
