name: Publish docs

on:
  workflow_call:
    inputs:
      workflow_origin: # see https://github.com/awslabs/aws-lambda-powertools-python/issues/1349
        required: true
        type: string
      prIsMerged:
        required: false
        default: "false"
        type: string
    secrets:
      token:
        required: true
  release:
    types: released

jobs:
  publish-docs:
    # see https://github.com/awslabs/aws-lambda-powertools-python/issues/1349
    if: inputs.workflow_origin == 'dreamorosi/aws-lambda-powertools-typescript' || github.event_name == 'released'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Here `token` is needed to avoid incurring in error GH006 Protected  Branch Update Failed,
          token: ${{ secrets.token }}
          # While `fetch-depth` is used to allow the workflow to later commit & push the changes.
          fetch-depth: 0
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
      # Use the combo between node version, name, and SHA-256 hash of the lock file as cache key so that
      # if one of them changes the cache is invalidated/discarded
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "./node_modules"
          key: 16-cache-utils-node-modules-${{ hashFiles('./package-lock.json') }}
      # Here we assume that there will always be a cache hit because this workflow can be triggered
      # only after tests have already happened on this same code
      - name: Build packages
        run: |
          npm run build -w packages/commons
          npm run build -w packages/logger & npm run build -w packages/tracer & npm run build -w packages/metrics
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      # We run this step only when the workflow has been triggered by a release
      # in this case we publish the docs to `/latest`
      - name: Set RELEASE_VERSION env var to `latest`
        if: ${{ github.event_name == 'released' }}
        run: |
          RELEASE_VERSION=$(git describe --abbrev=0 | sed 's/v//')
          echo "RELEASE_VERSION=${RELEASE_VERSION}"
          echo "${{ github.ref_name }}"
          echo "${GITHUB_REF#refs/*/}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      # We run this step only when the workflow has been triggered by a PR merge
      # in this case we publish the docs to `/dev`
      - name: Set RELEASE_VERSION env var to `dev`
        if: ${{ inputs.prIsMerged == 'true' && github.event_name != 'released' }}
        run: |
          echo "RELEASE_VERSION=dev" >> $GITHUB_ENV
      - name: Install doc generation dependencies
        if: ${{ env.RELEASE_VERSION != '' }}
        run: |
          pip install --upgrade pip 
          pip install -r docs/requirements.txt
      - name: Setup doc deploy
        if: ${{ env.RELEASE_VERSION != '' }}
        run: |
          git config --global user.name Docs deploy
          git config --global user.email docs@dummy.bot.com
      - name: Publish docs to latest
        if: ${{ env.RELEASE_VERSION != 'dev' && env.RELEASE_VERSION != '' }}
        run: |
          rm -rf site
          mkdocs build
          mike deploy --push --update-aliases --no-redirect "${{ env.RELEASE_VERSION }}" "latest"
          # Set latest version as a default
          mike set-default --push latest
      - name: Publish docs to dev
        if: ${{ env.RELEASE_VERSION == 'dev' && env.RELEASE_VERSION != '' }}
        run: |
          rm -rf site
          mkdocs build
          mike deploy --push dev
      - name: Build API docs
        if: ${{ env.RELEASE_VERSION != '' }}
        run: |
          rm -rf api
          npm run docs-generateApiDoc
      - name: Release API docs
        if: ${{ env.RELEASE_VERSION != '' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: ${{ env.RELEASE_VERSION }}/api
      - name: Release API docs to latest
        if: ${{ env.RELEASE_VERSION != 'dev' && env.RELEASE_VERSION != '' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api
          keep_files: true
          destination_dir: latest/api
